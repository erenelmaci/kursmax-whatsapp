const { app, BrowserWindow, Menu, ipcMain, dialog } = require("electron")
const path = require("path")
require("dotenv").config()
const { autoUpdater } = require("electron-updater")

// Geli≈ütirme modu kontrol√º (production'da false olacak)
const isDev = process.env.NODE_ENV === "development" || !app.isPackaged

// Puppeteer'ƒ± g√ºvenli ≈üekilde y√ºkle
let puppeteer = null
try {
  puppeteer = require("puppeteer")
  console.log("Puppeteer ba≈üarƒ±yla y√ºklendi")
} catch (error) {
  console.error("Puppeteer y√ºklenemedi:", error.message)
  console.log("Uygulama test modunda √ßalƒ±≈üacak")
}

// Geli≈ütirme modunda otomatik yenileme
if (isDev) {
  try {
    require("electron-reload")(__dirname)
  } catch (error) {
    console.log("electron-reload bulunamadƒ± (production modu)")
  }
}

let mainWindow
let browser = null
let page = null
let whatsappStatus = "disconnected"

// G√ºncelleme durumu
let updateAvailable = false
let updateDownloaded = false
let updateInfo = null

// G√ºncelleme ayarlarƒ±
autoUpdater.autoDownload = true // Otomatik indirme aktif
autoUpdater.autoInstallOnAppQuit = true

// Mac i√ßin g√ºncelleme sistemi aktif
if (process.platform === "darwin") {
  console.log("Mac'te g√ºncelleme sistemi aktif")
  autoUpdater.autoDownload = true
  autoUpdater.autoInstallOnAppQuit = true
  // Mac i√ßin √∂zel ayarlar
  autoUpdater.allowDowngrade = false
  autoUpdater.allowPrerelease = false
  // Mac i√ßin DMG formatƒ±nƒ± kabul et
  autoUpdater.setFeedURL({
    provider: "github",
    owner: "erenelmaci",
    repo: "kursmax-whatsapp",
    private: false,
    releaseType: "release",
  })
}

// Geli≈ütirme modunda g√ºncelleme kontrol√ºn√º zorla
if (isDev) {
  autoUpdater.forceDevUpdateConfig = true
}

// G√ºncelleme event listener'larƒ±
autoUpdater.on("checking-for-update", () => {
  console.log("G√ºncelleme kontrol ediliyor...")
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-status", { status: "checking" })
  }
})

autoUpdater.on("update-available", (info) => {
  console.log("G√ºncelleme mevcut:", info)
  updateAvailable = true
  updateInfo = info
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-status", {
      status: "available",
      info: info,
    })
  }
})

autoUpdater.on("update-not-available", (info) => {
  console.log("G√ºncelleme yok:", info)
  updateAvailable = false
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-status", {
      status: "not-available",
      info: info,
    })
  }
})

autoUpdater.on("error", (err) => {
  console.log("G√ºncelleme hatasƒ±:", err)
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-status", {
      status: "error",
      error: err.message,
    })
  }
})

autoUpdater.on("download-progress", (progressObj) => {
  console.log("ƒ∞ndirme ilerlemesi:", progressObj)
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-progress", progressObj)
  }
})

autoUpdater.on("update-downloaded", (info) => {
  console.log("G√ºncelleme indirildi:", info)
  updateDownloaded = true
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send("update-status", {
      status: "downloaded",
      info: info,
    })
  }
})

// G√ºncelleme kurulumu ba≈üladƒ±ƒüƒ±nda uygulamayƒ± kapat
autoUpdater.on("before-quit-for-update", () => {
  console.log("G√ºncelleme kurulumu ba≈ülƒ±yor, uygulama kapatƒ±lƒ±yor...")
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.close()
  }
  app.quit()
})

// G√ºncelleme kontrol fonksiyonu
function checkForUpdates() {
  console.log("G√ºncelleme kontrol ediliyor...")
  autoUpdater.checkForUpdates()
}

// G√ºncelleme indirme fonksiyonu
function downloadUpdate() {
  console.log("G√ºncelleme indiriliyor...")
  autoUpdater.downloadUpdate()
}

// G√ºncelleme kurma fonksiyonu
function installUpdate() {
  console.log("G√ºncelleme kuruluyor...")

  // √ñnce pencereyi kapat
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.close()
  }

  // Sonra g√ºncellemeyi kur
  autoUpdater.quitAndInstall()
}

// KursMax API Bilgileri
let kursmaxCredentials = {
  kurumkod: "",
  kullanici: "",
  parola: "",
  isLoggedIn: false,
}

// Test i√ßin sabit telefon numarasƒ±
// ‚ö†Ô∏è KENDƒ∞ NUMARANIZI BURAYA YAZIN! (90 ile ba≈ülayacak ≈üekilde)
// √ñrnek: +905551234567
const TEST_PHONE_NUMBER = "+905519716365" // Bu numarayƒ± kendi numaranƒ±zla deƒüi≈ütirin

// KursMax API Endpoint'leri
const KURSMAX_API = {
  LOGIN: "https://www.kursmax.com/kurumlar/rapor/wagiris.aspx",
  VERSION: "https://www.kursmax.com/kurumlar/rapor/wa_version.aspx",
  OGRENCI_LIST: "https://www.kursmax.com/kurumlar/rapor/walist_ogrenci.aspx",
  DEVAM_LIST: "https://www.kursmax.com/kurumlar/rapor/wagunlukdevam.aspx",
  VADE_LIST: "https://www.kursmax.com/kurumlar/rapor/wavade.aspx",
  SINAV_LIST: "https://www.kursmax.com/kurumlar/rapor/wasinavlist.aspx",
  SINAV_OGR_LIST: "https://www.kursmax.com/kurumlar/rapor/wasinavogrlist.aspx",
  ODEME_LIST: "https://www.kursmax.com/kurumlar/rapor/waodeme.aspx",
  ONKAYIT_LIST: "https://www.kursmax.com/kurumlar/rapor/walist_onkayit.aspx",
  ARSIV_LIST: "https://www.kursmax.com/kurumlar/rapor/walist_arsiv.aspx",
  // √ñƒürenci portal endpoint'leri
  OGRENCI_KARNE_TYT: "https://www.kursmax.com/ogrenci/rapor/wakarne_tyt.aspx",
  OGRENCI_KARNE_AYT: "https://www.kursmax.com/ogrenci/rapor/wakarne_ayt.aspx",
  OGRENCI_KARNE_LGS: "https://www.kursmax.com/ogrenci/rapor/wakarne_lgs.aspx",
  OGRENCI_KARNE_ODS: "https://www.kursmax.com/ogrenci/rapor/wakarne_ods.aspx",
  OGRENCI_PROGRAM: "https://www.kursmax.com/ogrenci/rapor/waprogram.aspx",
}

// HTML Agility Pack benzeri i≈ülevsellik i√ßin cheerio kullan
const cheerio = require("cheerio")
const axios = require("axios")

function createWindow() {
  // Ana pencere olu≈ütur
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: true,
      webSecurity: false,
    },
    icon: isDev
      ? path.join(__dirname, "assets/icon.png")
      : path.join(process.resourcesPath, "assets/icon.png"),
    show: false,
  })

  // HTML dosyasƒ±nƒ± y√ºkle
  mainWindow.loadFile("index.html")

  // Pencere hazƒ±r olduƒüunda g√∂ster
  mainWindow.once("ready-to-show", async () => {
    mainWindow.show()

    // F12 ile DevTools a√ßma kƒ±sayolu
    mainWindow.webContents.on("before-input-event", (event, input) => {
      if (input.key === "F12") {
        mainWindow.webContents.toggleDevTools()
        event.preventDefault()
      }
    })

    // Puppeteer login sonrasƒ± ba≈ülatƒ±lacak, ≈üimdi ba≈ülatma
    console.log("Uygulama hazƒ±r, login sonrasƒ± WhatsApp ba≈ülatƒ±lacak")
  })

  // Geli≈ütirici ara√ßlarƒ±nƒ± a√ß (geli≈ütirme modunda)
  if (isDev) {
    // DevTools'u otomatik a√ßma - sadece manuel olarak a√ßƒ±labilir
    // mainWindow.webContents.openDevTools();
  }

  // Pencere kapatƒ±ldƒ±ƒüƒ±nda
  mainWindow.on("closed", () => {
    mainWindow = null
  })
}

// Uygulama hazƒ±r olduƒüunda pencere olu≈ütur
app.whenReady().then(async () => {
  // Geli≈ütirme modunda deƒüilse g√ºncelleme kontrol√º yap
  if (!isDev) {
    console.log("G√ºncelleme kontrol ediliyor...")
    try {
      // G√ºncelleme kontrol√º tamamlanana kadar bekle
      await new Promise((resolve) => {
        let updateChecked = false

        autoUpdater.on("update-not-available", () => {
          if (!updateChecked) {
            updateChecked = true
            console.log("G√ºncelleme yok, uygulama ba≈ülatƒ±lƒ±yor...")
            resolve()
          }
        })

        autoUpdater.on("update-available", (info) => {
          if (!updateChecked) {
            updateChecked = true
            console.log("G√ºncelleme mevcut:", info)
            // G√ºncelleme varsa dialog g√∂ster
            if (mainWindow && !mainWindow.isDestroyed()) {
              mainWindow.webContents.send("update-status", {
                status: "available",
                info: info,
              })
            }
            resolve()
          }
        })

        autoUpdater.on("error", (err) => {
          if (!updateChecked) {
            updateChecked = true
            console.log("G√ºncelleme kontrol√º hatasƒ±:", err)
            resolve()
          }
        })

        // 10 saniye timeout
        setTimeout(() => {
          if (!updateChecked) {
            updateChecked = true
            console.log("G√ºncelleme kontrol√º timeout, uygulama ba≈ülatƒ±lƒ±yor...")
            resolve()
          }
        }, 10000)

        // G√ºncelleme kontrol√ºn√º ba≈ülat
        autoUpdater.checkForUpdates()
      })
    } catch (error) {
      console.log("G√ºncelleme kontrol√º hatasƒ±:", error)
    }
  } else {
    console.log("Geli≈ütirme modunda g√ºncelleme kontrol√º devre dƒ±≈üƒ±")
  }

  // G√ºncelleme kontrol√º tamamlandƒ±ktan sonra uygulamayƒ± ba≈ülat
  createWindow()
})

// T√ºm pencereler kapatƒ±ldƒ±ƒüƒ±nda uygulamayƒ± kapat
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// KursMax Login Fonksiyonu
async function kursmaxLogin(kurumkod, kullanici, parola) {
  try {
    console.log("KursMax'e giri≈ü yapƒ±lƒ±yor...")

    // Platform tespiti ve log
    const platform = process.platform
    const platformName =
      platform === "darwin"
        ? "macOS"
        : platform === "win32"
        ? "Windows"
        : platform === "linux"
        ? "Linux"
        : platform
    console.log(`üñ•Ô∏è  Sistem: ${platformName} (${platform})`)
    console.log(`üì± Electron s√ºr√ºm√º: ${process.versions.electron}`)
    console.log(`üîß Node.js s√ºr√ºm√º: ${process.versions.node}`)

    const url = `${KURSMAX_API.LOGIN}?q0=${encodeURIComponent(
      kurumkod
    )}&q1=${encodeURIComponent(kullanici)}&q3=${encodeURIComponent(parola)}`

    const response = await axios.get(url, {
      timeout: 30000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      },
    })

    const $ = cheerio.load(response.data)
    let loginResult = "0"

    // Tablo i√ßindeki ilk h√ºcreyi kontrol et (C# projesindeki gibi)
    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length > 0) {
        loginResult = $(cells[0]).text().trim()
        return false // d√∂ng√ºy√º durdur
      }
    })

    if (loginResult !== "0") {
      kursmaxCredentials = {
        kurumkod: kurumkod,
        kullanici: kullanici,
        parola: parola,
        isLoggedIn: true,
      }
      console.log("KursMax giri≈üi ba≈üarƒ±lƒ±")
      return { success: true, message: "Giri≈ü ba≈üarƒ±lƒ±" }
    } else {
      console.log("KursMax giri≈üi ba≈üarƒ±sƒ±z")
      return { success: false, message: "Giri≈ü bilgileri hatalƒ±" }
    }
  } catch (error) {
    console.error("KursMax login hatasƒ±:", error.message)
    return { success: false, message: "Baƒülantƒ± hatasƒ±: " + error.message }
  }
}

// KursMax API'den veri √ßekme fonksiyonu
async function fetchKursmaxData(endpoint, params = {}) {
  try {
    if (!kursmaxCredentials.isLoggedIn) {
      throw new Error("KursMax'e giri≈ü yapƒ±lmamƒ±≈ü")
    }

    const url = `${endpoint}?q0=${encodeURIComponent(
      kursmaxCredentials.kurumkod
    )}&q1=${encodeURIComponent(
      kursmaxCredentials.kullanici
    )}&q3=${encodeURIComponent(kursmaxCredentials.parola)}`

    // Ek parametreleri ekle
    Object.keys(params).forEach((key) => {
      url += `&${key}=${encodeURIComponent(params[key])}`
    })

    const response = await axios.get(url, {
      timeout: 30000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      },
    })

    return { success: true, data: response.data }
  } catch (error) {
    console.error("KursMax veri √ßekme hatasƒ±:", error.message)
    return { success: false, message: error.message }
  }
}

// Uygulama kapatƒ±lƒ±rken temizlik
app.on("before-quit", async () => {
  if (browser) {
    try {
      await browser.close()
      console.log("Puppeteer browser kapatƒ±ldƒ±")
    } catch (error) {
      console.error("Browser kapatƒ±lƒ±rken hata:", error)
    }
  }
})

// ===== IPC HANDLERS - T√ºm handler'lar burada tanƒ±mlanƒ±r =====

// KursMax Login
ipcMain.handle("kursmax-login", async (event, credentials) => {
  const result = await kursmaxLogin(
    credentials.kurumkod,
    credentials.kullanici,
    credentials.parola
  )
  return result
})

// Login durumu kontrol
ipcMain.handle("check-login-status", async (event) => {
  return {
    isLoggedIn: kursmaxCredentials.isLoggedIn,
    kurumkod: kursmaxCredentials.kurumkod,
    kullanici: kursmaxCredentials.kullanici,
  }
})

// WhatsApp durum kontrol√º
ipcMain.handle("check-whatsapp-status", async (event) => {
  try {
    if (!puppeteer || !page) {
      return {
        success: true,
        status: "disconnected",
        message: "Puppeteer bulunamadƒ±",
      }
    }

    await checkWhatsAppStatus()

    return {
      success: true,
      status: whatsappStatus,
      message: `WhatsApp durumu: ${whatsappStatus}`,
    }
  } catch (error) {
    console.error("WhatsApp durum kontrol√º hatasƒ±:", error)
    return {
      success: false,
      status: "error",
      message: error.message,
    }
  }
})

// WhatsApp sayfasƒ±nƒ± yenile
ipcMain.handle("refresh-whatsapp", async (event) => {
  try {
    if (!page) {
      return { success: false, message: "WhatsApp sayfasƒ± bulunamadƒ±" }
    }

    console.log("WhatsApp sayfasƒ± yenileniyor...")
    await page.reload({ waitUntil: "networkidle2" })

    setTimeout(async () => {
      await checkWhatsAppStatus()
    }, 2000)

    return { success: true, message: "WhatsApp sayfasƒ± yenilendi" }
  } catch (error) {
    console.error("WhatsApp sayfasƒ± yenileme hatasƒ±:", error)
    return { success: false, message: error.message }
  }
})

// √ñƒürenci Listesi
ipcMain.handle("get-ogrenci-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.OGRENCI_LIST)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const students = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 8) {
        const student = {
          numara: $(cells[0]).text().trim(),
          sinif: $(cells[1]).text().trim(),
          ad: $(cells[2]).text().trim(),
          soyad: $(cells[3]).text().trim(),
          ceptel: $(cells[4]).text().trim(),
          annecep: $(cells[5]).text().trim(),
          babacep: $(cells[6]).text().trim(),
          seviye: $(cells[7]).text().trim(),
          parola: cells.length > 8 ? $(cells[8]).text().trim() : "",
        }
        if (student.numara && student.ad) {
          students.push(student)
        }
      }
    })

    return { success: true, students: students }
  }
  return result
})

// Devamsƒ±zlƒ±k Listesi
ipcMain.handle("get-devam-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.DEVAM_LIST)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const devamList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 6) {
        const devam = {
          numara: $(cells[0]).text().trim(),
          ad: $(cells[1]).text().trim(),
          soyad: $(cells[2]).text().trim(),
          ders: $(cells[3]).text().trim(),
          ceptel: $(cells[4]).text().trim(),
          annecep: $(cells[5]).text().trim(),
        }
        if (devam.numara && devam.ad) {
          devamList.push(devam)
        }
      }
    })

    return { success: true, devamList: devamList }
  }
  return result
})

// Vade Listesi
ipcMain.handle("get-vade-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.VADE_LIST)
  console.log(result)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const vadeList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 4) {
        const vade = {
          ad: $(cells[0]).text().trim(),
          borc: $(cells[1]).text().trim(),
          gecikme: $(cells[2]).text().trim(),
          annecep: $(cells[3]).text().trim(),
          babacep: cells.length > 4 ? $(cells[4]).text().trim() : "",
        }
        if (vade.ad && vade.borc) {
          vadeList.push(vade)
        }
      }
    })

    return { success: true, vadeList: vadeList }
  }
  return result
})

// Sƒ±nav Listesi
ipcMain.handle("get-sinav-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.SINAV_LIST)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const sinavList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 8) {
        const sinav = {
          sinavno: $(cells[0]).text().trim(),
          tur: $(cells[1]).text().trim(),
          seviye: $(cells[2]).text().trim(),
          sinavad: $(cells[3]).text().trim(),
          tarih: $(cells[4]).text().trim(),
          ceptel: cells.length > 5 ? $(cells[5]).text().trim() : "",
          annecep: cells.length > 6 ? $(cells[6]).text().trim() : "",
          parola: cells.length > 7 ? $(cells[7]).text().trim() : "",
        }
        if (sinav.sinavno && sinav.tur) {
          sinavList.push(sinav)
        }
      }
    })

    return { success: true, sinavList: sinavList }
  }
  return result
})

// √ñdeme Listesi
ipcMain.handle("get-odeme-list", async (event, tarih) => {
  const result = await fetchKursmaxData(KURSMAX_API.ODEME_LIST, { trh: tarih })
  if (result.success) {
    const $ = cheerio.load(result.data)
    const odemeList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 7) {
        const odeme = {
          ad: $(cells[0]).text().trim(),
          tahsilat: $(cells[1]).text().trim(),
          kalanvade: $(cells[2]).text().trim(),
          kalanborc: $(cells[3]).text().trim(),
          sonrakiodeme: $(cells[4]).text().trim(),
          annecep: cells.length > 5 ? $(cells[5]).text().trim() : "",
          babacep: cells.length > 6 ? $(cells[6]).text().trim() : "",
        }
        if (odeme.ad && odeme.tahsilat) {
          odemeList.push(odeme)
        }
      }
    })

    return { success: true, odemeList: odemeList }
  }
  return result
})

// √ñn Kayƒ±t Listesi
ipcMain.handle("get-onkayit-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.ONKAYIT_LIST)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const onkayitList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 7) {
        const onkayit = {
          numara: $(cells[0]).text().trim(),
          ad: $(cells[1]).text().trim(),
          soyad: $(cells[2]).text().trim(),
          ceptel: $(cells[3]).text().trim(),
          annecep: $(cells[4]).text().trim(),
          babacep: $(cells[5]).text().trim(),
          seviye: $(cells[6]).text().trim(),
        }
        if (onkayit.numara && onkayit.ad) {
          onkayitList.push(onkayit)
        }
      }
    })

    return { success: true, onkayitList: onkayitList }
  }
  return result
})

// Ar≈üiv Listesi
ipcMain.handle("get-arsiv-list", async (event) => {
  const result = await fetchKursmaxData(KURSMAX_API.ARSIV_LIST)
  if (result.success) {
    const $ = cheerio.load(result.data)
    const arsivList = []

    $("table tr").each((index, row) => {
      const cells = $(row).find("td")
      if (cells.length >= 8) {
        const arsiv = {
          numara: $(cells[0]).text().trim(),
          ad: $(cells[1]).text().trim(),
          soyad: $(cells[2]).text().trim(),
          ceptel: $(cells[3]).text().trim(),
          annecep: $(cells[4]).text().trim(),
          babacep: $(cells[5]).text().trim(),
          seviye: $(cells[6]).text().trim(),
          tarih: $(cells[7]).text().trim(),
        }
        if (arsiv.numara && arsiv.ad) {
          arsivList.push(arsiv)
        }
      }
    })

    return { success: true, arsivList: arsivList }
  }
  return result
})

// Test verileri
ipcMain.handle("get-institutions", async () => {
  return [
    { id: 1, name: "Test Kurumu 1" },
    { id: 2, name: "Test Kurumu 2" },
  ]
})

ipcMain.handle("get-classes", async (event, institutionId) => {
  return [
    { id: 1, name: "9-A Sƒ±nƒ±fƒ±" },
    { id: 2, name: "10-B Sƒ±nƒ±fƒ±" },
    { id: 3, name: "11-C Sƒ±nƒ±fƒ±" },
  ]
})

ipcMain.handle("get-students", async (event, classId) => {
  return [
    { id: 1, name: "Test √ñƒürenci 1", phone: TEST_PHONE_NUMBER },
    { id: 2, name: "Test √ñƒürenci 2", phone: TEST_PHONE_NUMBER },
    { id: 3, name: "Test √ñƒürenci 3", phone: TEST_PHONE_NUMBER },
  ]
})

// Mesaj g√∂nderme
ipcMain.handle("send-messages", async (event, data) => {
  try {
    const { recipients, message } = data

    console.log("üöÄ Mesaj g√∂nderme i≈ülemi ba≈ülatƒ±lƒ±yor...")
    console.log("Alƒ±cƒ± sayƒ±sƒ±:", recipients.length)
    console.log("Mesaj:", message.substring(0, 50) + "...")

    if (whatsappStatus !== "connected") {
      throw new Error("WhatsApp baƒülantƒ±sƒ± yok - Durum: " + whatsappStatus)
    }

    if (!page) {
      throw new Error("WhatsApp sayfasƒ± bulunamadƒ±")
    }

    let sentCount = 0
    const failed = []
    const successful = []

    for (let i = 0; i < recipients.length; i++) {
      const rec = recipients[i]
      console.log(
        `\nüì§ ${i + 1}/${recipients.length} - ${rec.name} (${rec.phone})`
      )

      try {
        const result = await sendWhatsAppMessage(rec.phone, message)
        if (result === true) {
          sentCount++
          successful.push(rec)
          console.log(`‚úÖ ${rec.name} - Mesaj g√∂nderildi`)
        } else {
          failed.push({ ...rec, error: "G√∂nderim ba≈üarƒ±sƒ±z" })
          console.log(`‚ùå ${rec.name} - G√∂nderim ba≈üarƒ±sƒ±z`)
        }
      } catch (error) {
        failed.push({ ...rec, error: error.message })
        console.error(`‚ùå ${rec.name} (${rec.phone}) - Hata:`, error.message)
      }

      // Mesajlar arasƒ± bekleme (spam korumasƒ±)
      if (i < recipients.length - 1) {
        console.log("‚è≥ Sonraki mesaj i√ßin bekleniyor...")
        await new Promise((resolve) => setTimeout(resolve, 3000))
      }
    }

    const result = {
      success: failed.length === 0,
      sentCount,
      failed,
      successful,
      totalCount: recipients.length,
      message:
        failed.length === 0
          ? `‚úÖ T√ºm mesajlar ba≈üarƒ±yla g√∂nderildi (${sentCount}/${recipients.length})`
          : `‚ö†Ô∏è ${sentCount}/${recipients.length} mesaj g√∂nderildi, ${failed.length} ba≈üarƒ±sƒ±z`,
    }

    console.log("\nüìä Mesaj g√∂nderme √∂zeti:")
    console.log(`‚úÖ Ba≈üarƒ±lƒ±: ${sentCount}`)
    console.log(`‚ùå Ba≈üarƒ±sƒ±z: ${failed.length}`)
    console.log(`üì± Toplam: ${recipients.length}`)

    return result
  } catch (error) {
    console.error("üí• Mesaj g√∂nderme genel hatasƒ±:", error)
    return {
      success: false,
      sentCount: 0,
      failed: recipients || [],
      successful: [],
      totalCount: recipients ? recipients.length : 0,
      message: "Genel hata: " + error.message,
    }
  }
})

// Otomatik mesaj ≈üablonlarƒ± olu≈üturma
ipcMain.handle("create-auto-messages", async (event, data) => {
  try {
    const {
      messageType,
      targetAudience,
      students,
      customMessage = "",
      examInfo = {},
      paymentDate = new Date().toLocaleDateString("tr-TR"),
    } = data

    console.log("üìù Otomatik mesaj ≈üablonlarƒ± olu≈üturuluyor...")
    console.log("Mesaj tipi:", messageType)
    console.log("Hedef kitle:", targetAudience)
    console.log("√ñƒürenci sayƒ±sƒ±:", students.length)
    if (students && students.length > 0) {
      console.log("ƒ∞lk √∂ƒürenci objesi ve field'larƒ±:", students[0])
      console.log("T√ºm field isimleri:", Object.keys(students[0]))
    }

    const messages = []

    for (const student of students) {
      // Birden fazla hedef kitle i√ßin d√∂ng√º
      const audiences = Array.isArray(targetAudience)
        ? targetAudience
        : [targetAudience]
      for (const audience of audiences) {
        let phone = ""
        let recipientName = ""
        switch (audience) {
          case "student":
            phone = student.ceptel || ""
            recipientName = `${student.ad} ${student.soyad} - √ñƒürenci Cep Tel`
            break
          case "mother":
            phone = student.annecep || ""
            recipientName = `${student.ad} ${student.soyad} - Anne Cep Tel`
            break
          case "father":
            phone = student.babacep || ""
            recipientName = `${student.ad} ${student.soyad} - Baba Cep Tel`
            break
          default:
            continue
        }
        if (!phone || phone.trim().length !== 10) {
          console.log(
            `‚ö†Ô∏è ${student.ad} ${student.soyad} - Ge√ßersiz telefon: ${phone}`
          )
          continue
        }
        let message = ""
        switch (messageType) {
          case "custom":
            message = customMessage
            break
          case "absence":
            message = `Deƒüerli Velimiz , √ñƒürenciniz : ${student.ad} ${
              student.soyad
            }, ${
              student.ders || "ders"
            } Dersine Bu Saat ƒ∞tibariyle Katƒ±lmamƒ±≈ütƒ±r. Bilgilerinize Sunulur.`
            break
          case "overdue":
            message = `Deƒüerli Velimiz , √ñƒürenciniz : ${
              student.ad
            } i√ßin Toplam : ${student.borc || "0"} TL. Vadesi Ortalama : ${
              student.gecikme || "0"
            } G√ºn Gecikmi≈ü √ñdemeniz Bulunmaktadƒ±r. Bilgilerinize Sunulur.`
            break
          case "exam_card":
            const examType = examInfo.type || "TYT"
            let karneUrl = ""
            switch (examType) {
              case "TYT":
                karneUrl = `${KURSMAX_API.OGRENCI_KARNE_TYT}?kod=${kursmaxCredentials.kurumkod}&sno=${examInfo.examNo}&ogno=${student.numara}&pno=${student.parola}&svy=${student.seviye}`
                break
              case "AYT":
                karneUrl = `${KURSMAX_API.OGRENCI_KARNE_AYT}?kod=${kursmaxCredentials.kurumkod}&sno=${examInfo.examNo}&ogno=${student.numara}&pno=${student.parola}&svy=${student.seviye}`
                break
              case "LGS":
                karneUrl = `${KURSMAX_API.OGRENCI_KARNE_LGS}?kod=${kursmaxCredentials.kurumkod}&sno=${examInfo.examNo}&ogno=${student.numara}&pno=${student.parola}&svy=${student.seviye}`
                break
              case "ODS":
                karneUrl = `${KURSMAX_API.OGRENCI_KARNE_ODS}?kod=${kursmaxCredentials.kurumkod}&sno=${examInfo.examNo}&ogno=${student.numara}&pno=${student.parola}&svy=${student.seviye}`
                break
            }
            message = `${
              examInfo.examName || "Deneme"
            } sƒ±nav karneniz i√ßin verilen baƒülantƒ±ya tƒ±klayƒ±n ${karneUrl}`
            break
          case "login_info":
            message = `Merhabalar, √ñƒürencimizin devamsƒ±zlƒ±k , ders programƒ± ve t√ºm sƒ±nav sonu√ßlarƒ±na eri≈üim i√ßin kursmax.com √∂ƒürenci takip panelinize giri≈üte kullanacaƒüƒ±nƒ±z √ñƒürenci Numaranƒ±z: ${student.numara} ve Parolanƒ±z : ${student.parola}`
            break
          case "schedule":
            const programUrl = `${KURSMAX_API.OGRENCI_PROGRAM}?kod=${kursmaxCredentials.kurumkod}&ogno=${student.numara}`
            message = `Merhabalar, √ñƒürencinizin Haftalƒ±k Ders Programƒ±nƒ± √ñƒürenmek ƒ∞√ßin Verilen Baƒülantƒ±ya Tƒ±klayƒ±n : ${programUrl}`
            break
          case "payment":
            const kalanBorc = student.kalanborc || "0"
            const vadeGecen = student.gecikme || "0"
            const sonrakiOdeme = student.sonrakiodeme || "0"
            message = `Deƒüerli velimiz, ${paymentDate} tarihinde i≈ülenen ${
              student.tahsilat || "0"
            } TL. √∂demeniz i√ßin te≈üekk√ºr ederiz. Toplam kalan borcunuz ${kalanBorc} TL dir.`
            if (parseFloat(kalanBorc) > 0) {
              message += ` Bug√ºn itibari ile vadesi ge√ßen borcunuz ${vadeGecen} TL dir.`
              if (parseFloat(sonrakiOdeme) > 0) {
                message += ` Bir sonraki taksit √∂demeniz ${
                  student.sonrakiodemeTarih || ""
                } tarihinde ${sonrakiOdeme} TL dir.`
              }
            }
            break
          default:
            console.log(`‚ö†Ô∏è Bilinmeyen mesaj tipi: ${messageType}`)
            continue
        }
        messages.push({
          name: `${student.ad} ${student.soyad}`,
          phone: phone,
          message: message,
          recipientName: recipientName,
        })
        console.log(
          `‚úÖ ${student.ad} ${student.soyad} - ${audience} i√ßin mesaj hazƒ±rlandƒ±`
        )
      }
    }

    console.log(`üìä Toplam ${messages.length} mesaj hazƒ±rlandƒ±`)

    return {
      success: true,
      messages: messages,
      count: messages.length,
      message: `${messages.length} adet otomatik mesaj hazƒ±rlandƒ±`,
    }
  } catch (error) {
    console.error("üí• Otomatik mesaj olu≈üturma hatasƒ±:", error)
    return {
      success: false,
      messages: [],
      count: 0,
      message: "Hata: " + error.message,
    }
  }
})

// Puppeteer ba≈ülatma
async function initializePuppeteer() {
  try {
    if (!puppeteer) {
      console.log("Puppeteer bulunamadƒ±, test modunda √ßalƒ±≈üƒ±yor...")
      whatsappStatus = "connected" // Test modunda baƒülƒ± olarak ayarla
      return
    }

    console.log("Puppeteer ba≈ülatƒ±lƒ±yor...")

    // Geli≈ütirme modunda Puppeteer'ƒ± g√∂r√ºn√ºr modda ba≈ülat
    if (isDev) {
      console.log("Geli≈ütirme modunda Puppeteer ba≈ülatƒ±lƒ±yor...")

      // Geli≈ütirme modunda Chrome'u g√∂r√ºn√ºr yap
      const devLaunchOptions = {
        headless: false, // Geli≈ütirme modunda g√∂r√ºn√ºr
        defaultViewport: null,
        args: [
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--window-size=1200,800",
        ],
      }

      browser = await puppeteer.launch(devLaunchOptions)
      console.log("Geli≈ütirme modunda browser ba≈ülatƒ±ldƒ±")
      page = await browser.newPage()

      // WhatsApp Web'e git
      console.log("WhatsApp Web'e gidiliyor...")
      await page.goto("https://web.whatsapp.com", {
        waitUntil: "networkidle2",
        timeout: 30000,
      })

      console.log("WhatsApp Web y√ºklendi")
      whatsappStatus = "connected"
      return
    }

    // Production i√ßin √∂zel ayarlar
    const launchOptions = {
      headless: isDev ? false : true, // Geli≈ütirme modunda g√∂r√ºn√ºr, production'da gizli
      defaultViewport: null, // Tam ekran
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-accelerated-2d-canvas",
        "--no-first-run",
        "--no-zygote",
        "--disable-gpu",
        "--window-size=1200,800",
        "--disable-web-security",
        "--disable-features=VizDisplayCompositor",
        "--disable-extensions",
        "--disable-plugins",
        "--disable-background-timer-throttling",
        "--disable-backgrounding-occluded-windows",
        "--disable-renderer-backgrounding",
        "--disable-features=TranslateUI",
        "--disable-ipc-flooding-protection",
      ],
    }

    // Puppeteer'ƒ±n kendi Chrome'unu kullan
    console.log("Puppeteer'ƒ±n kendi Chrome'u kullanƒ±lƒ±yor...")

    // Executable path'i ayarla
    if (app.isPackaged) {
      // Production'da Puppeteer'ƒ±n Chromium'unu kullan
      const puppeteerPath = path.join(
        process.resourcesPath,
        "puppeteer",
        ".local-chromium"
      )
      const chromePath = path.join(
        puppeteerPath,
        "chrome-mac-arm64",
        "Google Chrome for Testing.app",
        "Contents",
        "MacOS",
        "Google Chrome for Testing"
      )

      if (require("fs").existsSync(chromePath)) {
        launchOptions.executablePath = chromePath
        console.log("Puppeteer Chromium bulundu:", chromePath)
      } else {
        console.log("Puppeteer Chromium bulunamadƒ±, varsayƒ±lan kullanƒ±lƒ±yor")
      }
    }

    // Kullanƒ±cƒ±ya bilgi ver
    if (mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.send("chrome-not-found", {
        message:
          "Puppeteer'ƒ±n kendi Chrome'u kullanƒ±lƒ±yor. Daha iyi performans i√ßin Google Chrome'u y√ºkleyebilirsiniz.",
        recommendation: "https://www.google.com/chrome/",
      })
    }

    browser = await puppeteer.launch(launchOptions)

    console.log("Browser ba≈ülatƒ±ldƒ±, sayfa olu≈üturuluyor...")
    page = await browser.newPage()

    // Sayfa kapatƒ±ldƒ±ƒüƒ±nda frame hatalarƒ±nƒ± √∂nle
    page.on("close", () => {
      console.log("Sayfa kapatƒ±ldƒ±")
      page = null
    })

    page.on("error", (error) => {
      console.log("Sayfa hatasƒ±:", error.message)
      page = null
    })

    // Sayfa y√ºklendiƒüinde log
    page.on("load", () => {
      console.log("WhatsApp Web sayfasƒ± y√ºklendi")
    })

    // WhatsApp Web'e git
    console.log("WhatsApp Web'e gidiliyor...")
    await page.goto("https://web.whatsapp.com", {
      waitUntil: "networkidle2",
      timeout: 30000,
    })

    console.log("WhatsApp Web y√ºklendi, durum kontrol√º ba≈ülatƒ±lƒ±yor...")

    // ƒ∞lk WhatsApp durumunu kontrol et
    await checkWhatsAppStatus()

    // WhatsApp durumunu periyodik olarak kontrol et (3 saniyede bir)
    setInterval(async () => {
      try {
        await checkWhatsAppStatus()
      } catch (error) {
        console.error("Periyodik WhatsApp durum kontrol√º hatasƒ±:", error)
      }
    }, 3000)
  } catch (error) {
    console.error("Puppeteer ba≈ülatma hatasƒ±:", error)
    console.log("Test modunda devam ediliyor...")
    whatsappStatus = "connected" // Test modunda baƒülƒ± olarak ayarla

    // Kullanƒ±cƒ±ya hata bilgisi ver
    if (mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.send("puppeteer-error", {
        message: "Chrome ba≈ülatƒ±lamadƒ±. L√ºtfen Google Chrome'u y√ºkleyin.",
        recommendation: "https://www.google.com/chrome/",
      })
    }
  }
}

// WhatsApp durumunu kontrol et
async function checkWhatsAppStatus() {
  try {
    if (!puppeteer || !page) {
      console.log("Puppeteer bulunamadƒ±, test modunda √ßalƒ±≈üƒ±yor...")
      whatsappStatus = "connected"
      return
    }

    // Sayfa hala a√ßƒ±k mƒ± kontrol et
    if (page.isClosed()) {
      console.log("Sayfa kapatƒ±lmƒ±≈ü, durum kontrol√º atlanƒ±yor...")
      whatsappStatus = "disconnected"
      return
    }

    // Frame'in hala ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol et
    try {
      await page.evaluate(() => {
        // Basit bir test - eƒüer bu √ßalƒ±≈üƒ±rsa frame ge√ßerli
        return document.readyState
      })
    } catch (frameError) {
      console.log("Frame hatasƒ±, sayfa yeniden y√ºkleniyor...")
      try {
        await page.reload({ waitUntil: "networkidle2", timeout: 30000 })
        await new Promise((resolve) => setTimeout(resolve, 2000))
      } catch (reloadError) {
        console.error("Sayfa yeniden y√ºkleme hatasƒ±:", reloadError)
        whatsappStatus = "disconnected"
        return
      }
    }

    // Daha saƒülam WhatsApp durum kontrol√º
    const result = await page.evaluate(() => {
      // 1. QR kod kontrol√º
      const qrCanvas = document.querySelector("canvas")
      if (qrCanvas) return { status: "qr_required", number: null }

      // 2. Sohbet/mesaj/chat anahtar kelimeleri ve ana elementler
      const appDiv = document.querySelector('div[data-testid="app"]')
      const chatList = document.querySelector('div[data-testid="chat-list"]')
      const messageBox = document.querySelector(
        'div[data-testid="conversation-compose-box-input"]'
      )
      const conversationHeader = document.querySelector(
        'div[data-testid="conversation-header"]'
      )
      const bodyText = document.body.innerText.toLowerCase()

      if (
        appDiv ||
        chatList ||
        messageBox ||
        conversationHeader ||
        bodyText.includes("sohbet") ||
        bodyText.includes("mesaj") ||
        bodyText.includes("chat")
      ) {
        return { status: "connected", number: null }
      }

      // 3. Y√ºkleniyor kontrol√º
      const loadingElements = document.querySelectorAll(
        '.loading, .spinner, [data-testid="loading"]'
      )
      if (loadingElements.length > 0) {
        return { status: "loading", number: null }
      }

      // 4. QR kod metni kontrol√º
      if (
        bodyText.includes("qr") ||
        bodyText.includes("kodu") ||
        bodyText.includes("telefon")
      ) {
        return { status: "qr_required", number: null }
      }

      return { status: "disconnected", number: null }
    })

    const status = result.status
    const whatsappNumber = result.number

    whatsappStatus = status
    // Durumu renderer'a bildir
    if (mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.send("whatsapp-status-update", {
        status: status,
        number: whatsappNumber,
      })
    }
  } catch (error) {
    console.error("WhatsApp durum kontrol√º hatasƒ±:", error)
    whatsappStatus = "disconnected"
  }
}

// WhatsApp mesaj g√∂nderme fonksiyonu (C# projesindeki mantƒ±kla)
async function sendWhatsAppMessage(phoneNumber, message) {
  try {
    if (!page) throw new Error("Puppeteer sayfasƒ± bulunamadƒ±")

    // Sayfa hala a√ßƒ±k mƒ± kontrol et
    if (page.isClosed()) {
      throw new Error("WhatsApp sayfasƒ± kapatƒ±lmƒ±≈ü")
    }

    // Frame'in hala ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol et
    try {
      await page.evaluate(() => {
        return document.readyState
      })
    } catch (frameError) {
      console.log("Frame hatasƒ±, sayfa yeniden y√ºkleniyor...")
      try {
        await page.reload({ waitUntil: "networkidle2", timeout: 30000 })
        await new Promise((resolve) => setTimeout(resolve, 2000))
      } catch (reloadError) {
        throw new Error("WhatsApp sayfasƒ± yeniden y√ºklenemedi")
      }
    }

    const formattedPhone = phoneNumber.replace(/^"+/, "").replace(/\s/g, "")
    console.log(`üì± ${phoneNumber} numarasƒ±na mesaj g√∂nderiliyor...`)

    // C# projesindeki gibi WhatsApp Web'e git
    await page.goto("https://web.whatsapp.com/", {
      waitUntil: "networkidle2",
      timeout: 30000,
    })
    console.log("WhatsApp Web a√ßƒ±ldƒ±")

    // Sayfanƒ±n y√ºklenmesini bekle
    await new Promise((resolve) => setTimeout(resolve, 3000))

    // C# projesindeki gibi numara arama kutusu se√ßicileri
    const phoneInputSelectors = [
      '[data-testid="chat-list-search"]',
      'div[contenteditable="true"][data-tab="3"]',
      'input[placeholder*="Ara"]',
      'input[placeholder*="Search"]',
      'div[contenteditable="true"]',
      ".selectable-text.copyable-text",
      '[data-testid="conversation-search"]',
    ]

    // 1. Numara arama kutusunu bul
    let phoneInput = null
    for (const selector of phoneInputSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 3000 })
        phoneInput = await page.$(selector)
        if (phoneInput) {
          console.log("Numara arama kutusu bulundu:", selector)
          break
        }
      } catch (e) {
        console.log("Numara arama kutusu bulunamadƒ±:", selector)
      }
    }

    if (!phoneInput) {
      throw new Error("Numara arama kutusu bulunamadƒ±")
    }

    // 2. C# projesindeki gibi √∂nce Escape bas, sonra numara yaz, sonra Enter
    console.log("Numara yazƒ±lƒ±yor:", formattedPhone)
    await phoneInput.focus()
    await page.keyboard.press("Escape")
    await new Promise((resolve) => setTimeout(resolve, 500))
    await phoneInput.type(formattedPhone, { delay: 100 })
    await new Promise((resolve) => setTimeout(resolve, 1000))
    await page.keyboard.press("Enter")
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // 3. Eƒüer numara bulunamadƒ±ysa, yeni sohbet ba≈ülat (C# projesindeki gibi)
    try {
      // "Bulunamadƒ±" mesajƒ±nƒ± kontrol et
      const notFoundSelectors = [
        '[data-testid="no-chats-found"]',
        'div[data-testid="no-chats-found"]',
        ".no-chats-found",
        'div:contains("Bulunamadƒ±")',
        'div:contains("Not found")',
      ]

      let notFound = false
      for (const selector of notFoundSelectors) {
        try {
          const element = await page.$(selector)
          if (element) {
            notFound = true
            console.log("Numara bulunamadƒ±, yeni sohbet ba≈ülatƒ±lƒ±yor...")
            break
          }
        } catch (e) {
          // Sessiz ge√ß
        }
      }

      if (notFound) {
        // Yeni sohbet butonunu bul ve tƒ±kla
        const newChatSelectors = [
          '[data-testid="new-chat"]',
          'div[data-testid="new-chat"]',
          'button[aria-label="New chat"]',
          'button[title="New chat"]',
          'span[data-icon="new-chat"]',
          'div[data-icon="new-chat"]',
        ]

        let newChatButton = null
        for (const selector of newChatSelectors) {
          try {
            await page.waitForSelector(selector, { timeout: 3000 })
            newChatButton = await page.$(selector)
            if (newChatButton) {
              console.log("Yeni sohbet butonu bulundu:", selector)
              break
            }
          } catch (e) {
            console.log("Yeni sohbet butonu bulunamadƒ±:", selector)
          }
        }

        if (newChatButton) {
          await newChatButton.click()
          await new Promise((resolve) => setTimeout(resolve, 2000))

          // Yeni sohbet arama kutusunu bul
          const newChatInputSelectors = [
            '[data-testid="chat-list-search"]',
            'div[contenteditable="true"][data-tab="3"]',
            'input[placeholder*="Ara"]',
            'input[placeholder*="Search"]',
            'div[contenteditable="true"]',
          ]

          let newChatInput = null
          for (const selector of newChatInputSelectors) {
            try {
              await page.waitForSelector(selector, { timeout: 3000 })
              newChatInput = await page.$(selector)
              if (newChatInput) {
                console.log("Yeni sohbet arama kutusu bulundu:", selector)
                break
              }
            } catch (e) {
              console.log("Yeni sohbet arama kutusu bulunamadƒ±:", selector)
            }
          }

          if (newChatInput) {
            // C# projesindeki gibi √∂nce temizle, sonra numara yaz, sonra Enter
            await newChatInput.focus()
            await newChatInput.type("", { delay: 100 })
            await new Promise((resolve) => setTimeout(resolve, 500))
            await newChatInput.type(formattedPhone, { delay: 100 })
            await new Promise((resolve) => setTimeout(resolve, 1000))
            await page.keyboard.press("Enter")
            await new Promise((resolve) => setTimeout(resolve, 2000))
          }
        }
      }
    } catch (e) {
      console.log("Numara bulunamadƒ± kontrol√º ba≈üarƒ±sƒ±z, devam ediliyor...")
    }

    // 4. Mesaj kutusunu bul (C# projesindeki gibi)
    const messageBoxSelectors = [
      '[data-testid="conversation-compose-box-input"]',
      'div[contenteditable="true"][data-tab="10"]',
      '[contenteditable="true"]',
      ".selectable-text.copyable-text",
      'div[contenteditable="true"][data-tab="6"]',
    ]

    let messageBox = null
    for (const selector of messageBoxSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 5000 })
        messageBox = await page.$(selector)
        if (messageBox) {
          console.log("Mesaj kutusu bulundu:", selector)
          break
        }
      } catch (e) {
        console.log("Mesaj kutusu bulunamadƒ±:", selector)
      }
    }

    if (!messageBox) {
      throw new Error(
        "Mesaj kutusu bulunamadƒ± - WhatsApp Web'e giri≈ü yapƒ±lmamƒ±≈ü olabilir"
      )
    }

    // 5. C# projesindeki gibi mesajƒ± yaz
    console.log("Mesaj yazƒ±lƒ±yor:", message)
    await messageBox.focus()
    await new Promise((resolve) => setTimeout(resolve, 500))
    await messageBox.type(message, { delay: 50 })
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // 6. C# projesindeki gibi Enter ile g√∂nder
    console.log("Enter ile g√∂nderiliyor...")
    await page.keyboard.press("Enter")
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // 7. Mesajƒ±n g√∂nderildiƒüini kontrol et (C# projesindeki gibi)
    const finalText = await page.evaluate(
      (selector) => {
        const element = document.querySelector(selector)
        return element ? element.textContent || element.innerText : ""
      },
      messageBoxSelectors.find((selector) => {
        try {
          return document.querySelector(selector)
        } catch {
          return false
        }
      })
    )

    console.log("G√∂nderim sonrasƒ± mesaj kutusu:", finalText)

    // Mesaj kutusu bo≈üsa ba≈üarƒ±lƒ±
    if (
      finalText.trim() === "" ||
      !finalText.includes(message.substring(0, 10))
    ) {
      console.log("‚úÖ Mesaj ba≈üarƒ±yla g√∂nderildi")

      // C# projesindeki gibi Escape ile mesaj kutusundan √ßƒ±k
      await page.keyboard.press("Escape")
      await new Promise((resolve) => setTimeout(resolve, 500))

      // C# projesindeki gibi Escape ile numara arama kutusundan √ßƒ±k
      await page.keyboard.press("Escape")
      await new Promise((resolve) => setTimeout(resolve, 500))

      return true
    } else {
      throw new Error("Mesaj g√∂nderilemedi - mesaj kutusu hala dolu")
    }
  } catch (error) {
    console.error(`‚ùå Mesaj g√∂nderme hatasƒ± (${phoneNumber}):`, error.message)
    throw error
  }
}

// G√ºncelleme IPC handler'larƒ±
ipcMain.handle("check-for-updates", () => {
  checkForUpdates()
  return { success: true }
})

ipcMain.handle("download-update", () => {
  downloadUpdate()
  return { success: true }
})

ipcMain.handle("install-update", () => {
  installUpdate()
  return { success: true }
})

ipcMain.handle("get-update-status", () => {
  return {
    updateAvailable,
    updateDownloaded,
    updateInfo,
  }
})

ipcMain.handle("get-app-version", () => {
  return app.getVersion()
})

// Login sonrasƒ± WhatsApp ba≈ülatma
ipcMain.handle("start-whatsapp", async () => {
  try {
    console.log("Login sonrasƒ± WhatsApp ba≈ülatƒ±lƒ±yor...")
    await initializePuppeteer()
    return { success: true, message: "WhatsApp ba≈ülatƒ±ldƒ±" }
  } catch (error) {
    console.error("WhatsApp ba≈ülatma hatasƒ±:", error)
    return { success: false, message: error.message }
  }
})

console.log("T√ºm IPC handler'lar kaydedildi")

ipcMain.handle(
  "send-whatsapp-message",
  async (event, { phoneNumber, message }) => {
    try {
      const result = await sendWhatsAppMessage(phoneNumber, message)
      return {
        success: result === true,
        message: result === true ? "Mesaj g√∂nderildi" : "Mesaj g√∂nderilemedi",
      }
    } catch (error) {
      return { success: false, message: error.message }
    }
  }
)
